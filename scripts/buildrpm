#!/bin/bash

set -ex

usage="$(basename "$0") [-h] [-s SPEC] [-r REPO] [-d GIT:TAG] [-v VENDOR]

where:
 -h        show this help text

 -s SPEC   builds using given SPEC. Here, SPEC basename is only
	   expected and should be located under rpm/ subfolder
	   of the sources. By default, the first SPEC in rpm/
	   subfolder is used

 -r REPO   additional RPM repository that is needed to fetch packages
	   required for building SPEC. Can be specified multiple times

 -d GIT:TAG download Git repository version described by Git commit ID or tag

 -v VENDOR set vendor for RPM

 -p        skip generation of source package and use the one in /source/rpm
"


# Builds RPMs from sources found in /source
SRCDIR=source
RPMOUTPUTDIR=$SRCDIR/RPMS
BDIR=/builder
RPMTARGET=`cat /etc/rpmtarget`

# use / as a base
cd /

RPMSRCDIR=$BDIR/rpmbuild/SOURCES
RPMSPECDIR=$BDIR/rpmbuild/SPECS
RPMDIR=$BDIR/rpmbuild/RPMS

SPEC=
VENDOR=
GIT_DOWNLOAD=
REMOVE_SRCDIR=
GENERATE_SOURCE_PACKAGE=1

# handle options
while getopts 's:r:d:v:ph' opt; do
  case "$opt" in
      s)
	  SPEC=$OPTARG
	  ;;

      r)
	  arg="$OPTARG"
	  echo "Adding repository $arg"
	  zypper ar --gpgcheck-allow-unsigned $arg repo-$OPTIND
	  echo
	  ;;

      d)
	  GIT_DOWNLOAD="$OPTARG"
	  echo "Will download $GIT_DOWNLOAD"
      SRCDIR=source-downloaded
      mkdir $SRCDIR
	  echo
	  ;;

      v)
	  VENDOR=$OPTARG
	  ;;

      p)
	  GENERATE_SOURCE_PACKAGE=
	  ;;

      ?|h)
	  echo "$usage"
	  exit 0
	  ;;
  esac
done
shift "$(($OPTIND -1))"

# download sources if needed
if [[ -n "$GIT_DOWNLOAD" ]]; then
    clone-git $SRCDIR "$GIT_DOWNLOAD"
    REMOVE_SRCDIR=1
fi

# set spec
if [[ -n "$SPEC" ]]; then
    SPEC=$SRCDIR/rpm/$SPEC
else
    specs=( $SRCDIR/rpm/*.spec )
    SPEC="${specs[0]}"
fi

# check if we have spec to build
if [ ! -f $SPEC ]; then
    echo "Cannot find any SPEC files in $SRCDIR/rpm"
    echo
    echo "$usage"
    exit -1
fi

SPECBNAME=`basename $SPEC`
echo Building $SPECBNAME

# refresh repositories and update packages
zypper --non-interactive ref
zypper --non-interactive up

# install dependencies
rpm-install-build-deps $SPEC

# prepare RPM builder directories
chown -R builder $BDIR
su builder rpmdev-setuptree

# copy all other sources and SPEC from rpm subfolder
cp -a $SRCDIR/rpm/* $RPMSRCDIR/
cp $SPEC $RPMSPECDIR

# set SPEC to point to the one that will be used in the build
SPEC=$RPMSPECDIR/$SPECBNAME

# set vendor if requested
if [[ -n "$VENDOR" ]]; then
    sed -i "1s/^/Vendor: $VENDOR\n/" $SPEC
fi

# set release of RPM
RELEASE=`rpmspec -q --srpm --qf "%{release}\n" $SPEC`
RELEASEOFFSET=`date -u +%y%m%d%H%M`
sed -i "s/^Release:.*/Release: ${RELEASE}.${RELEASEOFFSET}/g" $SPEC
echo "Set RPM release to ${RELEASE}.${RELEASEOFFSET}"

# set version and generate source archive if needed
if [[ -n "$GENERATE_SOURCE_PACKAGE" ]]; then
    # determine version and alter it if git repository
    pushd $SRCDIR
    if [ -d .git ]; then
	git config --global --add safe.directory /$SRCDIR
	VERSION=`git describe --first-parent --tags | sed s/-/+/g`
	if [[ $VERSION = fatal* || "$VERSION" = "" ]]; then
	    echo "Looks like not Git repository, keeping version as in SPEC"
	else
	    sed -i "s/^Version:.*/Version: $VERSION/g" $SPEC
	    echo "Set RPM version to: $VERSION"
	fi
    fi
    popd

    # determine source name
    SOURCE=$(rpmdev-spectool --source 0 $SPEC | cut -f2 -d" ")
    echo Packing sources into $SOURCE

    SRCBASE=`rpmspec -q --srpm --qf "%{name}-%{version}\n" $SPEC`
    TAROPTS="--exclude-vcs --exclude $SRCDIR/RPMS --exclude $SRCDIR/rpm --transform s/^$SRCDIR/$SRCBASE/"

    # pack main sources
    if [[ $SOURCE = *.tar.gz ]]; then
	tar cf - $TAROPTS $SRCDIR/ | gzip -1 -n > $RPMSRCDIR/$SOURCE
    elif [[ $SOURCE = *.tar.bz2 ]]; then
	tar cf - $TAROPTS $SRCDIR/ | bzip2 -1 -c > $RPMSRCDIR/$SOURCE
    elif [[ $SOURCE = *.tar.xz ]]; then
	tar cf - $TAROPTS $SRCDIR/ | xz -0 -c > $RPMSRCDIR/$SOURCE
    else
	echo "Unknown file extension for sources: $SOURCE"
	exit 2
    fi
fi

# for donwloaded sources only
# remove downloaded sources before build to save storage
if [[ -n "$REMOVE_SRCDIR" ]]; then
    echo Removing copy of downloaded sources before build
    rm -rf $SRCDIR
fi

# set RPATH check to none as the use in SFOS leads to failure in check
QA_RPATHS=$(( 0x0001|0x0002|0x0008|0x0010 ))

# start the build
su builder -c \
   "QA_RPATHS=$QA_RPATHS rpmbuild -bb \
       --define '_srcdefattr (-,root,root)' \
       --target=$RPMTARGET --nosignature \
       $SPEC"

# rpmlint
su builder -c "rpmlint $RPMDIR/"

# copy RPMS to source RPMS subfolder
mkdir -p $RPMOUTPUTDIR
cp $RPMDIR/*/* $RPMOUTPUTDIR/
chown -R `stat -c '%u:%g' source/.` $RPMOUTPUTDIR
chmod +r $RPMOUTPUTDIR/*

echo "
Ready
"
